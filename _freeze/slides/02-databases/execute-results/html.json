{
  "hash": "85b197b2242cb15641e91c9e8b46b83e",
  "result": {
    "markdown": "# Databases and Shiny\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\n---\n\n:::: {.columns}\n\n### SQL Jedi\n\n::: {.column width=\"50%\"}\n\n![](assets/img/c3po.png){width=\"45%\"}\n\n:::\n\n::: {.column width=\"50%}\n\n### `{dplyr}` Jedi \n\n![](assets/img/r2-d2.png){width=\"70%\"}\n\n:::\n\n::::\n\n## Interface to Databases: `{DBI}`\n\nUnified set of methods & classes bridging interfacing R to database management systems (DBMS)\n\n* Connect and disconnect from DB\n* Execute queries\n* Extract results\n* Obtain metadata when available\n* Each DBMS supported by a dedicated package\n\n## All About Connections\n\nYou have used connections in R (and may not realize it)\n\n```r\nread.csv(\"path/to/file.csv\", stringsAsFactors = FALSE)\n\nreadr::read_csv(\"path/to/file.csv\")\n\nopenxlsx::write.xlsx(df, file = \"/path/to/file.xlsx\")\n```\n\n. . .\n\n<br>\n\n> Behind the scenes: connections are dynamically created (and terminated) during file input/output.\n\n## Database Options\n\n::: {.nonincremental}\n* Relational databases come in many flavors\n:::\n\n:::: {.columns}\n\n::: {.column}\n\n### [SQLite](https://www.sqlite.org/index.html)\n\n<br>\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M0 64C0 28.65 28.65 0 64 0H229.5C246.5 0 262.7 6.743 274.7 18.75L365.3 109.3C377.3 121.3 384 137.5 384 154.5V448C384 483.3 355.3 512 320 512H64C28.65 512 0 483.3 0 448V64zM336 448V160H256C238.3 160 224 145.7 224 128V48H64C55.16 48 48 55.16 48 64V448C48 456.8 55.16 464 64 464H320C328.8 464 336 456.8 336 448z\"/></svg>`{=html} Written to file\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 576 512\" style=\"height:1em;width:1.12em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M320 32c0-9.9-4.5-19.2-12.3-25.2S289.8-1.4 280.2 1l-179.9 45C79 51.3 64 70.5 64 92.5V448H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H96 288h32V480 32zM256 256c0 17.7-10.7 32-24 32s-24-14.3-24-32s10.7-32 24-32s24 14.3 24 32zm96-128h96V480v32h32 64c17.7 0 32-14.3 32-32s-14.3-32-32-32H512V128c0-35.3-28.7-64-64-64H352v64z\"/></svg>`{=html} Open access\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} [`{RSQLite}`](https://rsqlite.r-dbi.org/)\n\nIdeal for prototyping DB solutions\n\n:::\n\n::: {.column}\n\n### [PostGreSQL](https://www.postgresql.org/)\n\n<br>\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M448 80v48c0 44.2-100.3 80-224 80S0 172.2 0 128V80C0 35.8 100.3 0 224 0S448 35.8 448 80zM393.2 214.7c20.8-7.4 39.9-16.9 54.8-28.6V288c0 44.2-100.3 80-224 80S0 332.2 0 288V186.1c14.9 11.8 34 21.2 54.8 28.6C99.7 230.7 159.5 240 224 240s124.3-9.3 169.2-25.3zM0 346.1c14.9 11.8 34 21.2 54.8 28.6C99.7 390.7 159.5 400 224 400s124.3-9.3 169.2-25.3c20.8-7.4 39.9-16.9 54.8-28.6V432c0 44.2-100.3 80-224 80S0 476.2 0 432V346.1z\"/></svg>`{=html} Hosted on server\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M144 144v48H304V144c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192V144C80 64.5 144.5 0 224 0s144 64.5 144 144v48h16c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256c0-35.3 28.7-64 64-64H80z\"/></svg>`{=html} Access via authentication\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} [`{RPostgres}`](https://rpostgres.r-dbi.org/)\n\nIdeal for production-grade DB workflows\n\n:::\n\n::::\n\n\n## Defining Connection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(RSQLite)\n\n# initialize connection object\ncon <- dbConnect(\n  drv = RSQLite::SQLite(),\n  dbname = \":memory:\"\n)\n\n# send data frame to a table\ndbWriteTable(con, \"sim_patients\", sim_patients)\n\n# disconnect when done\n#dbDisconnect(con)\n```\n:::\n\n\n## Applying your `{dplyr}` Skillz\n\n`{dbplyr}` provides automatic translation from dplyr syntax to SQL statements\n\n* Integrates with connection objects created by `{DBI}`\n* Calls are evaluated **lazily**: Only when you request results\n* Common dplyr verbs supported out of the box\n\n## Applying your `{dplyr}` Skillz\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nsim_patients_db <- tbl(con, \"sim_patients\")\n\nsim_patients_db %>%\n  group_by(ethnicity) %>%\n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [2 x 2]\n# Database: sqlite 3.39.4 [:memory:]\n  ethnicity       n\n  <chr>       <int>\n1 hispanic       20\n2 nonhispanic   140\n```\n:::\n:::\n\n\n## Connections in Shiny\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n![](assets/img/one_user.png)\n:::\n\n::: {.column width=\"60%\"}\n\nLogical ways to manage connections when developing solo\n\n:::\n\n::::\n\n## Connections in Shiny\n\n:::: {.columns}\n\n::: {.column width=\"70%\"}\n\n![](assets/img/computer_party.jpg)\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.nonincremental}\n* Many users creating connections\n* Potential for degraded performance in your app\n:::\n:::\n\n::::\n\n## Enter the [`{pool}`](https://github.com/rstudio/pool)!\n\n> Abstraction layer on top of database connection objects\n\n* Holds a group of connections to database \n* Knows to expand or reduce connections as needed\n\n## Let's Dive In\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```r\ncon <- dbConnect(\n  drv = RSQLite::SQLite(),\n  dbname = \":memory:\"\n)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```r\npool <- dbPool(\n  drv = RSQLite::SQLite(),\n  dbname = \":memory:\"\n)\n```\n:::\n\n::::\n\n::: {.nonincremental}\n* **pool** object a drop-in replacement for **con**\n* Each query goes to the pool first, then fetches or initializes a connection\n* Not necessary to create connections yourself \n:::\n\n# `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:white;overflow:visible;position:relative;\"><path d=\"M176 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM144 241.7v65.1l51 51c7.1 7.1 11.8 16.2 13.4 26.1l15.2 90.9c2.9 17.4-8.9 33.9-26.3 36.8s-33.9-8.9-36.8-26.3l-14.3-85.9L66.8 320C54.8 308 48 291.7 48 274.7V186.6c0-32.4 26.2-58.6 58.6-58.6c24.1 0 46.5 12 59.9 32l47.4 71.1 10.1 5V160c0-17.7 14.3-32 32-32H384c17.7 0 32 14.3 32 32v76.2l10.1-5L473.5 160c13.3-20 35.8-32 59.9-32c32.4 0 58.6 26.2 58.6 58.6v88.1c0 17-6.7 33.3-18.7 45.3l-79.4 79.4-14.3 85.9c-2.9 17.4-19.4 29.2-36.8 26.3s-29.2-19.4-26.3-36.8l15.2-90.9c1.6-9.9 6.3-19 13.4-26.1l51-51V241.7l-19 28.5c-4.6 7-11 12.6-18.5 16.3l-59.6 29.8c-2.4 1.3-4.9 2.2-7.6 2.8c-2.6 .6-5.3 .9-7.9 .8H256.7c-2.5 .1-5-.2-7.5-.7c-2.9-.6-5.6-1.6-8.1-3l-59.5-29.8c-7.5-3.7-13.8-9.4-18.5-16.3l-19-28.5zM2.3 468.1L50.1 348.6l49.2 49.2-37.6 94c-6.6 16.4-25.2 24.4-41.6 17.8S-4.3 484.5 2.3 468.1zM512 96c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zm77.9 252.6l47.8 119.5c6.6 16.4-1.4 35-17.8 41.6s-35-1.4-41.6-17.8l-37.6-94 49.2-49.2z\"/></svg>`{=html} Code-Along {background-color=\"#17395c\"}\n\nOptimize backend calculations in `{simclindata.shiny}` with SQLite database",
    "supporting": [
      "02-databases_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}