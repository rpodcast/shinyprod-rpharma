{
  "hash": "a7aac2b10db55155e34a09292c1eb39a",
  "result": {
    "markdown": "# Development Best Practices\n\n## All About Perspective\n\n![](https://d33wubrfki0l68.cloudfront.net/571b056757d68e6df81a3e3853f54d3c76ad6efc/32d37/diagrams/data-science.png)\n\nR is the standard-bearer for data analysis tooling\n\n## Shiny App Development\n\nNot just providing another interface for data analysis\n\n. . .\n\nYou are engineering an **entire workflow**\n\n## This Could Happen to You\n\n::: {.r-stack}\n![](assets/img/messydesk.svg){.fragment width=\"550\" height=\"400}\n\n![](assets/img/works_my_machine.jpg){.fragment width=\"500\" height=\"570\"}\n\n![](assets/img/conflicts.jpg){.fragment width=\"600\" height=\"400\"}\n:::\n\n## Thinking of You\n\nThese principles can guide (future) you on the right path:\n\n* Deliberate control of app dependencies\n* Managing code complexity with native R frameworks\n* Creating **modules** for streamlined organization and re-usability\n\nOthers not covered today\n\n* Rapid prototyping in design process\n* Defending against regressions with testing\n* Version control for collaboration and peace of mind\n\n# Application Dependencies\n\n## It's Never Just Shiny\n\n... at least for production-quality apps!\n\n* External data sources\n* Connections to other execution backends\n* Additional R packages!\n\n## Turned Upside-Down\n\nImagine your application is working great!\n\n<br>\n\n. . . \n\n:::: {.columns .v-center-container}\n\n::: {.column width=\"50%\"}\n\n```r\nupdate.packages(ask = FALSE)\nremotes::install_github(\"pkg\")\n```\n\n:::\n\n::: {.column width=\"50%}\n\n![](https://rfortherestofus.com/wp-content/uploads/2020/09/update-packages-prompt.png)\n\n:::\n\n::::\n\n## Turned Upside-Down\n\n:::: {.columns .v-center-container}\n\n::: {.column width=\"50%\"}\n\n`ggplot2` version `0.9.3`\n\n![](assets/img/computer_user_happy.png){width=\"60%\"}\n\n:::\n\n::: {.column width=\"50%\"}\n\n`ggplot2` version `1.0.0`\n\n![](http://i.giphy.com/RhEvCHIeZAZ6E.gif)\n\n:::\n\n::::\n\n## Take Control with [`{renv}`](https://rstudio.github.io/renv/)\n\n> Create **r**eproducible **env**ironments for your R projects.\n\n* Next generation of `{packrat}`\n* Isolated package library from rest of your system\n* Transfer projects to different collaborators / platforms\n* **Reproducible** package installation \n* Easily create new projects or convert existing projects with RStudio or built-in functions.\n\n## Under the Hood\n\nUpon initializing a project:\n\n1. Project-level `.Rprofile` to activate custom package library on startup\n1. Lockfile `renv.lock` to describe state of project library\n1. `renv/library` to hold private project library\n1. `renv/activate.R` performs activation\n\n# Application Structure\n\n## Enter the [`{golem}`](https://thinkr-open.github.io/golem/)\n\n> Opinionated framework for building production-grade Shiny applications as **R packages**\n\n* Scripts guide you with first steps akin to `{usethis}` & `{devtools}`\n* Encourages Shiny best practices (especially **modules**)\n* Streamlines deployment on multiple platforms\n\n## What are Modules?\n\n. . .\n\n### Building blocks to compose any Shiny app out of smaller, more understandable pieces\n\n* Avoids namespace collisions when using same widget across different areas of your app\n* Allow you to encapsulate distinct app interfaces\n* Organize code into logical and easy-to-understand components\n* Facilitate collaboration\n\n## Sound familiar?\n\n* R functions also help avoid collisions in variable names with general R code\n* Essential for creating non-trivial and extensive workflows\n\n## Anatomy of a Function (UI) {auto-animate=true}\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n```r\nartUI <- function() {\n  tagList(\n    checkboxInput(\n      \"input1\",\n      \"Check Here\"\n    ),\n    selectInput(\n      \"input2\",\n      \"Select Object\",\n      choices = c(\"jar\", \"vase\"),\n      selected = \"jar\",\n      multiple = FALSE\n    ),\n    plotOutput(\"plot1\")\n  )\n}\n```\n:::\n\n::: {.column width=\"40%\"}\n\n:::\n\n::::\n\n## Anatomy of a Module (UI) {auto-animate=true}\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\n```r\nartUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    checkboxInput(\n      ns(\"input1\"),\n      \"Check Here\"\n    ),\n    selectInput(\n      ns(\"input2\"),\n      \"Select Object\",\n      choices = c(\"jar\", \"vase\"),\n      selected = \"jar\",\n      multiple = FALSE\n    ),\n    plotOutput(ns(\"plot1\"))\n  )\n}\n```\n:::\n\n::: {.column width=\"40%\"}\n\n:::\n\n::::\n\n## Anatomy of a Module (UI)\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\n\n```{.r code-line-numbers=\"1,2,5,9\"}\nartUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    checkboxInput(\n      ns(\"input1\"),\n      \"Check Here\"\n    ),\n    selectInput(\n      ns(\"input2\"),\n      \"Select Object\",\n      choices = c(\"jar\", \"vase\"),\n      selected = \"jar\",\n      multiple = FALSE\n    )\n  )\n}\n```\n\n:::\n\n::: {.column width=\"40%\"}\n\n* `id`: String to use for namespace\n* `ns <- NS(id)`: Create proper namespace function\n\n:::\n\n::::\n\n## Anatomy of a Module (Server) {auto-animate=true}\n\n:::: {.columns}\n\n::: {.column width=\"75%\"}\n\n```r\nartServer <- function(input, output, session) {\n  df <- reactive({\n    # do something fancy\n  })\n  \n  output$plot1 <- renderPlot({\n    ggplot(df(), aes(x = x, y = y)) +\n      geom_point()\n  })\n}\n```\n\n:::\n\n::: {.column width=\"25%\"}\n\n:::\n\n::::\n\n## Anatomy of a Module (Server) {auto-animate=true}\n\n:::: {.columns}\n\n::: {.column width=\"75%\"}\n\n```r\nartServer <- function(id) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      df <- reactive({\n        # do something fancy\n      })\n      \n      output$plot1 <- renderPlot({\n        ggplot(df(), aes(x = x, y = y)) +\n          geom_point()\n      })\n    }\n  )\n}\n```\n\n:::\n\n::: {.column width=\"25%\"}\n\nMinimal changes necessary\n\n:::\n\n::::\n\n## Anatomy of a Module (Server) {auto-animate=true}\n\n:::: {.columns}\n\n::: {.column width=\"70%\"}\n\n```{.r code-line-numbers=\"1,2\"}\nartServer <- function(id) {\n  moduleServer(id,\n    function(input, output, session) {\n      df <- reactive({\n        # do something fancy\n      })\n      \n      output$plot1 <- renderPlot({\n        ggplot(df(), aes(x = x, y = y)) +\n          geom_point()\n      })\n    }\n  )\n}\n```\n\n:::\n\n::: {.column width=\"30%\"}\n\n:thinking: `id`\n\n:::\n\n::::\n\n* ``moduleServer()`: Encapsulate server-side logic with namespace applied.\n\n## Invoking Modules\n\n```{.r}\nui <- fluidPage(\n  fluidRow(\n    artUI(\"mod1\")\n  )\n)\n\nserver <- function(input, output, session) {\n  artServer(\"mod1\")\n}\n\nshinyApp(ui, server)\n```\n\n## Giving and Receiving \n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\n```r\nartUI <- function(id, choices = c(\"jar\", \"vase\")) {\n  ns <- NS(id)\n  tagList(\n    checkboxInput(\n      ns(\"input1\"),\n      \"Check Here\"\n    ),\n    selectInput(\n      ns(\"input2\"),\n      \"Select Object\",\n      choices = choices,\n      selected = choices[1],\n      multiple = FALSE\n    ),\n    plotOutput(ns(\"plot1\"))\n  )\n}\n```\n:::\n\n::: {.column width=\"40%\"}\n\n* Reasonable inputs: static values, vectors, flags\n* Avoid **reactive** parameters\n* Return value: `tagList()` of inputs, output placeholders, and other UI elements \n\n:::\n\n::::\n\n## Giving and Receiving \n\n```{.r}\nartServer <- function(id, df, title = \"My Plot\") {\n  moduleServer(id,\n    function(input, output, session) {\n      user_selections <- reactive({\n        list(input1 = input$input1, input2 = input$input2)\n      })\n      \n      output$plot1 <- renderPlot({\n        ggplot(df(), aes(x = x, y = y)) +\n          geom_point() +\n          ggtitle(title)\n      })\n      \n      user_selections\n    }\n  )\n}\n```\n\n* Input parameters (and return values) can be a mix of static and **reactive** objects\n\n## To () or not to () {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n```{.r}\n# app server\ndf <- reactive({\n  art_data |>\n    filter(dept == input$dept)\n})\n\nartServer(\"mod1\", df)\n```\n\n:::\n\n::: {.column width=\"60%\"}\n\n```{.r}\nartServer <- function(id, df, title = \"Amazing\") {\n  moduleServer(id,\n    function(input, output, session) {\n      user_selections <- reactive({\n        list(input1 = input$input1,\n             input2 = input$input2)\n      })\n      \n      output$plot1 <- renderPlot({\n        ggplot(df(), aes(x = x, y = y)) +\n          geom_point() +\n          ggtitle(title)\n      })\n      \n      user_selections\n    }\n  )\n}\n```\n\n:::\n\n::::\n\n* Reactive parameters reference by **name**: `df`\n* Inside module, **invoke** reactive parameter as you would any other reactive in Shiny: `df()`\n* Any reactive(s) returned by module should also be reference by **name**: `user_selections`,  ~~`user_selections()`~~\n\n\n# `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:white;overflow:visible;position:relative;\"><path d=\"M176 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM144 241.7v65.1l51 51c7.1 7.1 11.8 16.2 13.4 26.1l15.2 90.9c2.9 17.4-8.9 33.9-26.3 36.8s-33.9-8.9-36.8-26.3l-14.3-85.9L66.8 320C54.8 308 48 291.7 48 274.7V186.6c0-32.4 26.2-58.6 58.6-58.6c24.1 0 46.5 12 59.9 32l47.4 71.1 10.1 5V160c0-17.7 14.3-32 32-32H384c17.7 0 32 14.3 32 32v76.2l10.1-5L473.5 160c13.3-20 35.8-32 59.9-32c32.4 0 58.6 26.2 58.6 58.6v88.1c0 17-6.7 33.3-18.7 45.3l-79.4 79.4-14.3 85.9c-2.9 17.4-19.4 29.2-36.8 26.3s-29.2-19.4-26.3-36.8l15.2-90.9c1.6-9.9 6.3-19 13.4-26.1l51-51V241.7l-19 28.5c-4.6 7-11 12.6-18.5 16.3l-59.6 29.8c-2.4 1.3-4.9 2.2-7.6 2.8c-2.6 .6-5.3 .9-7.9 .8H256.7c-2.5 .1-5-.2-7.5-.7c-2.9-.6-5.6-1.6-8.1-3l-59.5-29.8c-7.5-3.7-13.8-9.4-18.5-16.3l-19-28.5zM2.3 468.1L50.1 348.6l49.2 49.2-37.6 94c-6.6 16.4-25.2 24.4-41.6 17.8S-4.3 484.5 2.3 468.1zM512 96c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zm77.9 252.6l47.8 119.5c6.6 16.4-1.4 35-17.8 41.6s-35-1.4-41.6-17.8l-37.6-94 49.2-49.2z\"/></svg>`{=html} Code-Along {background-color=\"#17395c\"}\n\nApplying `{golem}` & `{renv}`to our simclindata.shiny application\n\n::: footer\n[engineering-shiny.org](https://engineering-shiny.org/)\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}